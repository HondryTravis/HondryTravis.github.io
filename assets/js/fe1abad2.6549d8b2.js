"use strict";(self.webpackChunkhondrytravis_blog=self.webpackChunkhondrytravis_blog||[]).push([[7225],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(m,i(i({ref:n},s),{},{components:t})):r.createElement(m,i({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9325:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],l={title:"tree | \u6811"},p=void 0,c={unversionedId:"tree/index",id:"tree/index",isDocsHomePage:!1,title:"tree | \u6811",description:"\u76f8\u540c\u7684\u6811",source:"@site/packages/algorithm/tree/index.mdx",sourceDirName:"tree",slug:"/tree/index",permalink:"/algorithm/tree/index",editUrl:"https://github.com/HondryTravis/Blog/tree/master/packages/algorithm/tree/index.mdx",tags:[],version:"current",lastUpdatedBy:"travis",lastUpdatedAt:1670325249,formattedLastUpdatedAt:"2022/12/6",frontMatter:{title:"tree | \u6811"},sidebar:"algorithm",previous:{title:"double | \u53cc\u6307\u9488",permalink:"/algorithm/double_pointer/index"},next:{title:"heap | \u5806",permalink:"/algorithm/heap/index"}},s=[{value:"\u76f8\u540c\u7684\u6811",id:"\u76f8\u540c\u7684\u6811",children:[{value:"Q &amp; A",id:"q--a",children:[],level:3}],level:2},{value:"\u81ea\u52a8\u8865\u4f4d\u63a8\u8350",id:"\u81ea\u52a8\u8865\u4f4d\u63a8\u8350",children:[{value:"\u65b9\u6cd51",id:"\u65b9\u6cd51",children:[],level:3},{value:"\u65b9\u6cd52",id:"\u65b9\u6cd52",children:[],level:3}],level:2}],u={toc:s};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u76f8\u540c\u7684\u6811"},"\u76f8\u540c\u7684\u6811"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/same-tree/"},"LeetCode 100. \u76f8\u540c\u7684\u6811")),(0,o.kt)("p",null,"\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 p \u548c q \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e24\u68f5\u6811\u662f\u5426\u76f8\u540c\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002"),(0,o.kt)("p",null,"\u9ed8\u8ba4\u7684\u6bcf\u4e2a treeNode \u8282\u70b9"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"\u601d\u8def \u6df1\u5ea6\u4f18\u5148\u904d\u5386")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"\u76f8\u540c\u7684\u6761\u4ef6")),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c\u6bd4\u8f83\u4e24\u4e2a\u6811\u8282\u70b9\u7684\u5b50\u8282\u70b9\u90fd\u4e0d\u5b58\u5728\u7684\u65f6\u5019"),(0,o.kt)("li",{parentName:"ol"},"\u540c\u65f6\u8981\u6ee1\u8db3\u5df2\u7ecf\u6bd4\u8f83\u8fc7\u7684\u503c\u76f8\u7b49")),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"\u4e0d\u76f8\u540c\u7684\u6761\u4ef6")),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol"},"\u53ea\u8981\u4e24\u4e2a node \u8282\u70b9\u7684\u503c\u4e0d\u76f8\u540c\u5373\u4e3a\u4e0d\u76f8\u7b49"),(0,o.kt)("li",{parentName:"ol"},"\u53ea\u6709\u4e24\u68f5\u6811\u6709\u4e00\u65b9\u4e3a null \u5373\u4e0d\u76f8\u7b49")))),(0,o.kt)("h3",{id:"q--a"},"Q & A"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n  if(p === null && q === null) return true;\n  if(p === null || q === null) return false;\n  if(p.val !== q.val) return false;\n  return isSameTree(p.left, q.left) && isSameTree(p.right, q.right)\n};\n")),(0,o.kt)("h2",{id:"\u81ea\u52a8\u8865\u4f4d\u63a8\u8350"},"\u81ea\u52a8\u8865\u4f4d\u63a8\u8350"),(0,o.kt)("p",null,"\u6807\u9898 \u8f93\u5165\u7535\u8bdd\u53f7\u7801\u65f6\u81ea\u52a8\u63a8\u8350\u51fa\u4e0b\u4e00\u4f4d\u5408\u6cd5\u7684\u6570\u5b57\u96c6\n\u63cf\u8ff0\u4fe1\u606f\n\u516c\u53f8\u670910\u4e07\u540d\u5458\u5de5\uff0c\u6bcf\u540d\u5458\u5de5\u90fd\u6709\u4e00\u4e2a\u5ea7\u673a\u53f7\u7801\u3002\u73b0\u5728\u8981\u5728\u7f51\u9875\u4e0a\u5b9e\u73b0\u4e00\u4e2a\u201c\u81ea\u52a8\u8865\u4f4d\u63a8\u8350\u201d \u7684\u529f\u80fd\uff0c\u95ee\u5982\u4f55\u5b9e\u73b0\uff1f"),(0,o.kt)("p",null,"\u89e3\u91ca\uff1a\n\u201c\u81ea\u52a8\u8865\u4f4d\u63a8\u8350\u201d \u529f\u80fd\uff1a\u6709\u4e00\u4e2a\u8f93\u5165\u6846\uff0c\u7528\u6237\u6bcf\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u7acb\u9a6c\u63a8\u8350\u51fa\u4e0b\u4e00\u4f4d\u5408\u6cd5\u7684\u6570\u5b57\u96c6\u5408\u3002\n\u6bd4\u5982\u53ea\u6709 5789234\u30015623786\u30015633678\u4e09\u4e2a\u7535\u8bdd\u53f7\u7801\uff0c\u5f53\u7b2c\u4e00\u4f4d\u8f93\u51655\u65f6\uff0c\u7acb\u9a6c\u63a8\u8350\u4e0b\u4e00\u4f4d\u6709\u6548\u6570\u5b57\u96c6\u5408","[ 7, 6 ]","\uff0c\n\u5982\u679c\u7b2c\u4e8c\u4f4d\u8f93\u51656\u65f6\uff0c\u4e0b\u4e00\u4f4d\u6709\u6548\u6570\u5b57\u96c6\u5408\u4e3a","[2\uff0c3]","...."),(0,o.kt)("h3",{id:"\u65b9\u6cd51"},"\u65b9\u6cd51"),(0,o.kt)("p",null,"\u6784\u5efa\u5b57\u5178\u6811"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const Trie = function () {\n  this.children = {}\n}\n\nTrie.prototype.setup = function (phones) {\n  for (const phone of phones) this.insert(phone)\n}\n\nTrie.prototype.insert = function (phone) {\n  let node = this.children\n  for (const n of phone) {\n    node[n] || (node[n] = {})\n    node = node[n]\n  }\n  node.isEnd = true\n}\n\nTrie.prototype.searchWithSuggestion = function (prefix) {\n  let node = this.children\n  for (const n of prefix) {\n    if (!node[n]) return false\n    node = node[n]\n  }\n  return Reflect.ownKeys(node)\n}\n\nvar trie = new Trie()\ntrie.setup(['5789234', '5623786', '5633678'])\n\nconsole.log(trie.searchWithSuggestion('56')) // [2,3]\n\n")),(0,o.kt)("h3",{id:"\u65b9\u6cd52"},"\u65b9\u6cd52"),(0,o.kt)("p",null,"\u901a\u8fc7 set"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function suggestion(index, phones) {\n  let i = 0, len = phones.length\n  const set = new Set()\n  while (i < len) (set.add(phones[i][index]), i ++)\n  return [...set]\n}\n")))}d.isMDXComponent=!0}}]);