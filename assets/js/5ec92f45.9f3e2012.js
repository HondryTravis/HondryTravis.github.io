"use strict";(self.webpackChunkhondrytravis_blog=self.webpackChunkhondrytravis_blog||[]).push([[8116],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function d(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?d(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},d=Object.keys(n);for(r=0;r<d.length;r++)t=d[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(n);for(r=0;r<d.length;r++)t=d[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var a=r.createContext({}),l=function(n){var e=r.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=l(n.components);return r.createElement(a.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,d=n.originalType,a=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),p=l(t),f=i,h=p["".concat(a,".").concat(f)]||p[f]||u[f]||d;return t?r.createElement(h,o(o({ref:e},c),{},{components:t})):r.createElement(h,o({ref:e},c))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var d=t.length,o=new Array(d);o[0]=p;var s={};for(var a in e)hasOwnProperty.call(e,a)&&(s[a]=e[a]);s.originalType=n,s.mdxType="string"==typeof n?n:i,o[1]=s;for(var l=2;l<d;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3013:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=t(3117),i=t(102),d=(t(7294),t(3905)),o=["components"],s={title:"LinkedList | \u94fe\u8868"},a=void 0,l={unversionedId:"data_structure/linked_list",id:"data_structure/linked_list",isDocsHomePage:!1,title:"LinkedList | \u94fe\u8868",description:"\u94fe\u8868\uff08linked list\uff09\u662f\u4e00\u79cd\u5728\u7269\u7406\u4e0a\u975e\u8fde\u7eed\u3001\u975e\u987a\u5e8f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7531\u82e5\u5e72\u8282 \u70b9\uff08node\uff09\u6240\u7ec4\u6210\u3002",source:"@site/packages/algorithm/data_structure/linked_list.mdx",sourceDirName:"data_structure",slug:"/data_structure/linked_list",permalink:"/algorithm/data_structure/linked_list",editUrl:"https://github.com/HondryTravis/Blog/tree/master/packages/algorithm/data_structure/linked_list.mdx",tags:[],version:"current",lastUpdatedBy:"travis",lastUpdatedAt:1670325249,formattedLastUpdatedAt:"2022/12/6",frontMatter:{title:"LinkedList | \u94fe\u8868"},sidebar:"algorithm",previous:{title:"\u7b97\u6cd5\u5bfc\u8bba",permalink:"/algorithm/books/IntroductionToAlgorithm"},next:{title:"Stack | \u6808",permalink:"/algorithm/data_structure/stack"}},c=[{value:"\u5355\u5411\u94fe\u8868",id:"\u5355\u5411\u94fe\u8868",children:[{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",children:[],level:3},{value:"Q &amp; A",id:"q--a",children:[],level:3}],level:2},{value:"\u53cc\u5411\u94fe\u8868",id:"\u53cc\u5411\u94fe\u8868",children:[{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0-1",children:[],level:3},{value:"Q &amp; A",id:"q--a-1",children:[],level:3},{value:"\u6269\u5c55\u6027\u66f4\u5f3a\u7684\u94fe\u8868",id:"\u6269\u5c55\u6027\u66f4\u5f3a\u7684\u94fe\u8868",children:[],level:3}],level:2}],u={toc:c};function p(n){var e=n.components,s=(0,i.Z)(n,o);return(0,d.kt)("wrapper",(0,r.Z)({},u,s,{components:e,mdxType:"MDXLayout"}),(0,d.kt)("p",null,"\u94fe\u8868\uff08linked list\uff09\u662f\u4e00\u79cd\u5728\u7269\u7406\u4e0a\u975e\u8fde\u7eed\u3001\u975e\u987a\u5e8f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7531\u82e5\u5e72\u8282 \u70b9\uff08node\uff09\u6240\u7ec4\u6210\u3002"),(0,d.kt)("h2",{id:"\u5355\u5411\u94fe\u8868"},"\u5355\u5411\u94fe\u8868"),(0,d.kt)("p",null,"\u5355\u5411\u94fe\u8868\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e3b\u8981\u5305\u542b\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 next\uff0c\u5176\u4ed6\u90e8\u5206\u53ef\u4ee5\u662f\u6570\u636e\uff0c\u5c5e\u6027\uff0c\u65b9\u6cd5\u7b49\u7b49\uff0c\u53c2\u8003 react fiber"),(0,d.kt)("p",null,"\u7c7b\u4f3c\u8fd9\u6837 ",(0,d.kt)("img",{src:t(7069).Z})),(0,d.kt)("h3",{id:"\u5b9e\u73b0"},"\u5b9e\u73b0"),(0,d.kt)("p",null,"\u5355\u4e2a node \u8282\u70b9"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-ts"},"class Node {\n  static of(data) {\n    return new Node(data)\n  }\n  constructor(data) {\n    this.data = data || null\n    this.next =  null\n  }\n}\n")),(0,d.kt)("p",null,"\u5b9e\u73b0\u94fe\u8868"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-ts"},"class LinkedList {\n  constructor(node){\n    this.head = node || null\n    this.size = 0\n  }\n  append(node){\n    let current = this.head\n\n    if(!current) {\n      this.head = node\n      this.size ++\n      return this\n    }\n    while(current.next) {\n      current = current.next\n    }\n    current.next = node\n    this.size++\n  }\n\n  removeByIndex(index) {\n    if(index < 0 || index > this.size) {\n       throw console.error('\u8d85\u51fa\u8303\u56f4\u4e86')\n    }\n\n    const that = this\n    let ret = null\n    let type = null\n\n    if((this.size - 1) === index) type = 'last'\n    if(index === 0) type = 'head'\n    if(index > -1 && index < this.size) type = 'middle'\n\n    const deleteType = {\n      head() {\n        ret = that.head\n        that.head = that.head.next\n      },\n      last() {\n        const prevNode = that.getByIndex(index - 1)\n        ret = prevNode.next\n        prevNode.next = null\n      },\n      middle() {\n        const prevNode = that.getByIndex(index - 1)\n        const nextNode = prevNode.next.next\n        ret = prevNode.next\n        prevNode.next = nextNode\n      }\n    }\n\n    deleteType[type]()\n\n    return ret\n\n  }\n  insertByIndex(index, newNode) {\n    const that = this\n    let type = 'append'\n\n    if(index < 0 || index > this.size) {\n       throw console.error('\u8d85\u51fa\u8303\u56f4\u4e86')\n    }\n\n    if(this.size === 0) type = 'create'\n    if(this.size === index) type = 'append'\n    if(index === 0) type = 'replaceHead'\n    if(index > -1 && index < this.size) type = 'middle'\n\n    const insertType = {\n      create() {\n        that.head = newNode\n        that.last = newNode\n      },\n      replaceHead() {\n        newNode.next = that.head\n        that.head = newNode\n      },\n      middle() {\n        const current = that.getByIndex(index)\n        const prevNode = that.getByIndex(index - 1)\n\n        newNode.next = current\n        prevNode.next = newNode\n      },\n      append() {\n        that.append(newNode)\n      }\n    }\n\n    insertType[type]()\n    this.size ++\n    return this\n  }\n  getByIndex(index) {\n    if(index < 0) {\n      throw console.error('\u8f93\u5165\u6b63\u786e\u7684 index');\n    }\n    let current = this.head\n    for(let i = 0, j = index; i < j; i ++) {\n      current = current.next\n    }\n    return current\n  }\n  getAll() {\n    const ret = []\n    let current = this.head\n    while( current !== null ) {\n      ret.push(current)\n      current = current.next\n    }\n    return ret\n  }\n}\n")),(0,d.kt)("h3",{id:"q--a"},"Q & A"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-js"},"var link = new LinkedList\n\nlink.append(Node.of('1'))\nlink.append(Node.of('2'))\n\n// console.log(link.getByIndex(0))\n// console.log(link.insertByIndex(1, new Node('3')))\n// console.log(link.size)\n// console.log(link.removeByIndex(1))\n\n")),(0,d.kt)("h2",{id:"\u53cc\u5411\u94fe\u8868"},"\u53cc\u5411\u94fe\u8868"),(0,d.kt)("p",null,"\u53cc\u5411\u5411\u94fe\u8868\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u53c8\u5305\u542b\u4e3b\u8981\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 next\uff0c \u4e00\u90e8\u5206\u662f\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 prev"),(0,d.kt)("p",null,"\u7c7b\u4f3c\u8fd9\u6837 ",(0,d.kt)("img",{src:t(7606).Z})),(0,d.kt)("h3",{id:"\u5b9e\u73b0-1"},"\u5b9e\u73b0"),(0,d.kt)("p",null,"\u5b8c\u6574\u5b9e\u73b0\u65b9\u6848"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @description \u521b\u5efa\u4e00\u4e2a Node \u8282\u70b9\n *\n * @class Node\n */\nclass Node {\n  static of (args) {\n    return new Node(args)\n  }\n  constructor(args) {\n    const { key, data } = args\n    this.key = key ?? null\n    this.data = data ?? null\n    this.next = null\n    this.prev = null\n  }\n}\n\nclass LinkedList {\n  constructor() {\n    this.head = null\n    this.count = 0\n  }\n  /**\n   * @description \u83b7\u5f97\u94fe\u8868\u7684\u957f\u5ea6\n   * @readonly\n   * @memberof LinkedList\n   */\n  get size() {\n    return this.count\n  }\n  /**\n   * @description \u63d2\u5165\u8282\u70b9\n   * \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570 args\uff0c \u90a3\u4e48\u76f4\u63a5\u6dfb\u52a0\u5230\u6700\u540e\n   * \u5982\u679c\u5b58\u57282/3\u4e2a\u53c2\u6570\uff0c\u4e14\u7b2c\u4e00\u4e2a\u662f key\uff0c\u63d2\u5165\u5230\u6307\u5b9a key \u5143\u7d20\u4e4b\u540e\uff0c\u7b2c\u4e8c\u4e2a\u662f\u521b\u5efa\u7684 node \u9700\u8981\u7684 args\uff0c\u7b2c\u4e09\u4e2a\u662f\u662f\u5426\u5185\u90e8\u7684 key\n   * @param  {object | {key, object}} args\n   */\n  insert(...args) {\n    if (!args.length || args.length > 3) throw new Error(\"data format error\");\n\n    switch (args.length) {\n      case 2:\n      case 3:\n        return this.insertByIndex(...args)\n      case 1:\n      default:\n        return this.append(...args)\n    }\n  }\n  /**\n   * @description \u6dfb\u52a0\u8282\u70b9\n   * \u6dfb\u52a0\u5230\u94fe\u8868\u6700\u540e\n   * @param {*} args\n   * @return {*}\n   * @memberof LinkedList\n   */\n  append(args) {\n    let current = this.head\n    const node = Node.of(args)\n\n    if (!current) {\n      this.head = node;\n      this.count ++\n      return\n    }\n\n    while (current.next) {\n      current = current.next\n    }\n\n    node.prev = current\n    current.next = node\n    this.count ++\n    return true\n  }\n  /**\n   * @description \u67e5\u627e node \u8282\u70b9\n   * @param { string | number } key\n   * @param {boolean} [isInternalKey=false] // \u662f\u5426\u6307\u5b9a\u67e5\u627e node \u5185\u90e8\u7684 key\uff0c\u9ed8\u8ba4\u662f\u6309\u94fe\u8868\u987a\u5e8f\u4e3a index \u67e5\u627e\n   * @memberof LinkedList\n   */\n  find(key, isInternalKey = false) {\n    if (['object', 'function', 'boolean', 'symbol', 'undefined'].includes(typeof key)) return false\n\n    switch (typeof key) {\n      case \"number\":\n        if (isInternalKey) {\n          return this.findNodeByInternalKey(key)\n        }\n        return this.findNodeByIndex(key)\n      case \"string\":\n      default:\n        return this.findNodeByInternalKey(key)\n    }\n  }\n  /**\n   * @description \u627e\u5230\u524d\u4e00\u4e2a\u8282\u70b9\n   * { string | number } key\n   * @param {boolean} [isInternalKey=false] // \u662f\u5426\u6307\u5b9a\u67e5\u627e node \u5185\u90e8\u7684 key\uff0c\u9ed8\u8ba4\u662f\u6309\u94fe\u8868\u987a\u5e8f\u4e3a index \u67e5\u627e\n   * @memberof LinkedList\n   */\n  findPrev(key, isInternalKey = false) {\n    const target = this.find(key, isInternalKey)\n    return (target && target.prev) && target.prev\n  }\n  /**\n   * @description \u67e5\u627e\u5185\u90e8\u8282\u70b9\u901a\u8fc7 key \u5c5e\u6027\n   * @param { string | number } key\n   * @memberof LinkedList\n   */\n  findNodeByInternalKey(key) {\n    let current = this.head\n    while (current.next) {\n      if (current.key === key) break\n      current = current.next\n    }\n    return current\n  }\n  /**\n   * @description \u67e5\u627e\u8282\u70b9\u901a\u8fc7\u94fe\u8868\u6700\u4f73\u7684\u987a\u5e8f\u6309\u7167 index\n   * @param { string | number } key\n   * @memberof LinkedList\n   */\n  findNodeByIndex(index) {\n    if (index < 0 || index > this.size) {\n      console.error('\u8f93\u5165\u6b63\u786e\u7684 index');\n      return false\n    }\n    let current = this.head\n\n    for (let i = 0, j = index; i < j; i++) {\n      current = current.next\n    }\n    return current\n  }\n  /**\n   * @description \u67e5\u627e\u8282\u70b9\u901a\u8fc7\u94fe\u8868\u6700\u4f73\u7684\u987a\u5e8f\u6309\u7167 index\n   * @param { string | number } key \u94fe\u8868\u7684 key\n   * @param {boolean} [isInternalKey=false] // \u662f\u5426\u6307\u5b9a\u67e5\u627e node \u5185\u90e8\u7684 key\uff0c\u9ed8\u8ba4\u662f\u6309\u94fe\u8868\u987a\u5e8f\u4e3a index \u67e5\u627e\n   * @param { object } args node \u7684\u6570\u636e\n   * @memberof LinkedList\n   */\n  insertByIndex(key, args, isInternalKey = false) {\n    const targetNode = this.find(key, isInternalKey)\n    const newNode = Node.of(args)\n\n    const _internalInsert = (target, current) => {\n\n      current.prev = target\n      current.next = target.next\n      target.next = current\n\n      this.count ++\n      return true\n    }\n\n    return (targetNode && _internalInsert(targetNode, newNode)) || this.append(args)\n  }\n  /**\n   * @description \u5220\u9664\u94fe\u8868\u8282\u70b9\n   * @param { string | number } key \u5220\u9664\u7684 key\n   * @param {boolean} [isInternalKey=false] \u662f\u5426\u6307\u5b9a\u67e5\u627e node \u5185\u90e8\u7684 key\uff0c\u9ed8\u8ba4\u662f\u6309\u94fe\u8868\u987a\u5e8f\u4e3a index \u67e5\u627e\n   * @memberof LinkedList\n   */\n  delete(key, isInternalKey = false) {\n    const current = this.find(key, isInternalKey)\n    const prev = this.findPrev(key, isInternalKey)\n\n    if (!current) {\n      console.warn('not found this node')\n      return false\n    }\n    // \u53ef\u80fd\u662f\u5934\u90e8\u8282\u70b9\n    if (!prev && isInternalKey === false && key === 0) {\n      this.head = current.next;\n      this.count > 0 && this.count --\n      return true\n    }\n    if (current && prev) {\n      const nextNode = current.next\n      prev.next = nextNode\n      nextNode && (nextNode.prev = prev)\n      this.count > 0 && this.count --\n    }\n    return true\n  }\n  /**\n   * @description \u904d\u5386\u94fe\u8868\n   * @param { Function } callback\n   * @memberof LinkedList\n   */\n  forEach(callback) {\n    let current = this.head\n    let index = 0\n    while (current) {\n      typeof callback === 'function' && callback(current, index, this.head)\n      current = current.next\n      index++\n    }\n    return null\n  }\n  /**\n   * @description \u5c55\u5e73\u94fe\u8868\u81f3\u4e00\u4e2a\u6570\u7ec4\n   * @return { Array }\n   * @memberof LinkedList\n   */\n  flat() {\n    const ret = []\n    this.forEach(item => {\n      ret.push(item)\n    })\n    return ret\n  }\n  /**\n   * @description \u66ff\u6362\u4e00\u4e2a Node\n   * @param { string | number} key\n   * @param { object } args \u8981\u66ff\u6362\u7684\u6570\u636e\n   * @param { boolean } isInternalKey \u662f\u5426\u662f\u5185\u90e8\u7684 key\n   * @memberof LinkedList\n   */\n  replace(key, args, isInternalKey = false) {\n    const current = this.find(key, isInternalKey)\n    const newNode = Node.of(args)\n    if(current) {\n      newNode.prev = current.prev\n      newNode.next = current.next\n      current.prev.next = newNode\n      current.next.prev = newNode\n    }\n  }\n  /**\n   * @description \u6e05\u7a7a\u94fe\u8868\n   * @memberof LinkedList\n   */\n  clear() {\n    this.head = null\n  }\n}\n")),(0,d.kt)("h3",{id:"q--a-1"},"Q & A"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-js"},"var test = new LinkedList\n\nfor(let i = 0, j = 3; i < j; i ++) {\n  test.insert({key: i+1, data: i})\n}\n// \u67e5\u627e\nconsole.log(test.find(2) === test.find(3, true)) // true\n// \u5c55\u5e73\nconsole.log(test.flat()) // [Node, Node, Node]\n// \u76f4\u63a5\u63d2\u5165\ntest.insert({key:4, data: 3})\nconsole.log(test.flat()) // [Node, Node, Node, Node]\n\n// \u6307\u5b9a key\u63d2\u5165\ntest.insert(2, {key:'test', data: 4})\nconsole.log(test.flat())  // [Node, Node, Node, Node[\u8fd9\u4e2a node \u7684 key \u662f 'test'], Node]\n\n// \u6307\u5b9a key \u5e76\u4e14\u6307\u5b9a\u901a\u8fc7\u5185\u90e8\u7684 key \u67e5\u627e\u5e76\u63d2\u5165\ntest.insert('test', {key:'test1', data: 5}, true)\nconsole.log(test.flat())\n// [Node, Node, Node, Node[\u8fd9\u4e2a node \u7684 key \u662f 'test'],Node[\u8fd9\u4e2a node \u7684 key \u662f 'test1'],  Node]\n\n// \u5220\u9664key \u5e76\u4e14\u6307\u5b9a\u5185\u90e8\u7684\ntest.delete('test', true)\ntest.delete('test1', true)\nconsole.log(test.flat()) // [Node, Node, Node, Node]\n\n// \u5220\u9664 key \u4e0d\u6307\u5b9a\u5185\u90e8 key\uff0c\u4f7f\u7528\u94fe\u8868\u9ed8\u8ba4 index\ntest.delete(3)\nconsole.log(test.flat()) //[Node, Node, Node]\n")),(0,d.kt)("h3",{id:"\u6269\u5c55\u6027\u66f4\u5f3a\u7684\u94fe\u8868"},"\u6269\u5c55\u6027\u66f4\u5f3a\u7684\u94fe\u8868"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-ts"},"class Node<E> {\n\n    static readonly Undefined = new Node<any>(undefined);\n\n    element: E;\n    next: Node<E>;\n    prev: Node<E>;\n\n    constructor(element: E) {\n        this.element = element;\n        this.next = Node.Undefined;\n        this.prev = Node.Undefined;\n    }\n}\n\nexport class LinkedList<E> {\n\n    private _first: Node<E> = Node.Undefined;\n    private _last: Node<E> = Node.Undefined;\n    private _size: number = 0;\n\n    get size(): number {\n        return this._size;\n    }\n\n    isEmpty(): boolean {\n        return this._first === Node.Undefined;\n    }\n\n    clear(): void {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            const next = node.next;\n            node.prev = Node.Undefined;\n            node.next = Node.Undefined;\n            node = next;\n        }\n\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n\n    unshift(element: E): () => void {\n        return this._insert(element, false);\n    }\n\n    push(element: E): () => void {\n        return this._insert(element, true);\n    }\n\n    private _insert(element: E, atTheEnd: boolean): () => void {\n        const newNode = new Node(element);\n        if (this._first === Node.Undefined) {\n            this._first = newNode;\n            this._last = newNode;\n\n        } else if (atTheEnd) {\n            // push\n            const oldLast = this._last!;\n            this._last = newNode;\n            newNode.prev = oldLast;\n            oldLast.next = newNode;\n\n        } else {\n            // unshift\n            const oldFirst = this._first;\n            this._first = newNode;\n            newNode.next = oldFirst;\n            oldFirst.prev = newNode;\n        }\n        this._size += 1;\n\n        let didRemove = false;\n        return () => {\n            if (!didRemove) {\n                didRemove = true;\n                this._remove(newNode);\n            }\n        };\n    }\n\n    shift(): E | undefined {\n        if (this._first === Node.Undefined) {\n            return undefined;\n        } else {\n            const res = this._first.element;\n            this._remove(this._first);\n            return res;\n        }\n    }\n\n    pop(): E | undefined {\n        if (this._last === Node.Undefined) {\n            return undefined;\n        } else {\n            const res = this._last.element;\n            this._remove(this._last);\n            return res;\n        }\n    }\n\n    private _remove(node: Node<E>): void {\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n            // middle\n            const anchor = node.prev;\n            anchor.next = node.next;\n            node.next.prev = anchor;\n\n        } else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n            // only node\n            this._first = Node.Undefined;\n            this._last = Node.Undefined;\n\n        } else if (node.next === Node.Undefined) {\n            // last\n            this._last = this._last!.prev!;\n            this._last.next = Node.Undefined;\n\n        } else if (node.prev === Node.Undefined) {\n            // first\n            this._first = this._first!.next!;\n            this._first.prev = Node.Undefined;\n        }\n\n        // done\n        this._size -= 1;\n    }\n\n    *[Symbol.iterator](): Iterator<E> {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            yield node.element;\n            node = node.next;\n        }\n    }\n}\n")))}p.isMDXComponent=!0},7606:function(n,e,t){e.Z=t.p+"assets/images/doubly_linked_list-b01760ce7418b6093adcb803476c517c.png"},7069:function(n,e,t){e.Z=t.p+"assets/images/singly_linked_list-5e5bc2a79cd92c3486f8c03fbe1356cb.png"}}]);